name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always

jobs:
  get_version:
    name: Get Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    
    steps:
    - name: Get version
      id: get_version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "version=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "version=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi

  build:
    name: Build ${{ matrix.target }}
    needs: get_version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            artifact_name: bws
            asset_name: bws-linux-x86_64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            artifact_name: bws
            asset_name: bws-linux-x86_64-musl
          - target: x86_64-pc-windows-gnu
            os: ubuntu-latest
            artifact_name: bws.exe
            asset_name: bws-windows-x86_64.exe
          - target: x86_64-apple-darwin
            os: macos-latest
            artifact_name: bws
            asset_name: bws-macos-x86_64
          - target: aarch64-apple-darwin
            os: macos-latest
            artifact_name: bws
            asset_name: bws-macos-aarch64
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        targets: ${{ matrix.target }}
        
    - name: Install cross-compilation tools
      if: matrix.target == 'x86_64-unknown-linux-musl'
      run: |
        sudo apt-get update
        sudo apt-get install -y musl-tools
        
    - name: Install cross-compilation tools for Windows
      if: matrix.target == 'x86_64-pc-windows-gnu'
      run: |
        sudo apt-get update
        sudo apt-get install -y gcc-mingw-w64-x86-64
        
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.target }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.target }}-cargo-
          
    - name: Build binary
      run: |
        if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
          export CC_x86_64_pc_windows_gnu=x86_64-w64-mingw32-gcc
          export CARGO_TARGET_X86_64_PC_WINDOWS_GNU_LINKER=x86_64-w64-mingw32-gcc
        fi
        cargo build --release --target ${{ matrix.target }} --bin bws
        
    - name: Strip binary (Linux and macOS)
      if: matrix.os != 'windows-latest' && matrix.target != 'x86_64-pc-windows-gnu'
      run: strip target/${{ matrix.target }}/release/${{ matrix.artifact_name }}
      
    - name: Create archive
      run: |
        mkdir -p release
        cp target/${{ matrix.target }}/release/${{ matrix.artifact_name }} release/
        cp README.md release/
        cp config.toml release/config.example.toml
        
        if [ "${{ matrix.target }}" = "x86_64-pc-windows-gnu" ]; then
          cd release && zip -r ../${{ matrix.asset_name }}.zip .
        else
          tar -czf ${{ matrix.asset_name }}.tar.gz -C release .
        fi
        
    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ matrix.asset_name }}.zip
          ${{ matrix.asset_name }}.tar.gz
        if-no-files-found: ignore

  docker:
    name: Build Docker Image
    needs: get_version
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to GitHub Container Registry
      if: github.event_name != 'pull_request'
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
        labels: |
          org.opencontainers.image.description=BWS (Blazing Web Server) - A high-performance multi-site web server built with Pingora
          org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
          org.opencontainers.image.licenses=MIT
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  publish_crates:
    name: Publish to crates.io
    needs: get_version
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.89.0
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ubuntu-latest-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ubuntu-latest-cargo-
          
    - name: Verify package can be built
      run: cargo build --release
      
    - name: Run tests
      run: cargo test
      
    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}
      env:
        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}

  create_release:
    name: Create GitHub Release
    needs: [get_version, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      
    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.get_version.outputs.version }}
        name: BWS ${{ needs.get_version.outputs.version }}
        body: |
          ## BWS Multi-Site Web Server ${{ needs.get_version.outputs.version }}
          
          ### Features
          - üåê Multi-site hosting with configurable headers
          - üìÅ Static file serving with MIME type detection
          - üöÄ High-performance Pingora framework
          - üìä REST API endpoints
          - üîß TOML configuration
          - üê≥ Docker images available at `ghcr.io/benliao/bws:${{ needs.get_version.outputs.version }}`
          
          ### Installation Options
          
          **From crates.io:**
          ```bash
          cargo install bws-web-server --version ${{ needs.get_version.outputs.version }}
          ```
          
          **From Docker:**
          ```bash
          docker run -p 8080:8080 ghcr.io/benliao/bws:${{ needs.get_version.outputs.version }}
          ```
          
          **From Binary:**
          Download the appropriate binary for your platform below.
          
          ### Usage
          1. Download the binary for your platform
          2. Create a `config.toml` file (see README for examples)
          3. Create static directories for your sites
          4. Run: `./bws` (Linux/macOS) or `bws.exe` (Windows)
          
          ### Platform Support
          - **Linux**: x86_64 (glibc and musl)
          - **macOS**: x86_64 and ARM64 (Apple Silicon)
          - **Windows**: x86_64 (foreground mode only - no daemon support)
          
          For detailed documentation, see the [README](https://github.com/${{ github.repository }}/blob/main/README.md).
        files: |
          **/*
        draft: false
        prerelease: false
