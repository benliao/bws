name: Hot Reload Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  hot-reload-test:
    name: Hot Reload Integration Test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.89.0
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build BWS
      run: cargo build --release --bin bws
      
    - name: Setup test environment
      run: |
        # Create test static files
        mkdir -p test-site/static
        echo "<html><body><h1>Original Content</h1></body></html>" > test-site/static/index.html
        
        # Create initial configuration
        cat > test-hot-reload.toml << 'EOF'
        [server]
        name = "Hot Reload Test Server"
        host = "0.0.0.0"
        worker_threads = 2
        
        [[sites]]
        name = "test-site"
        hostname = "localhost"
        port = 8080
        static_dir = "test-site/static"
        default_site = true
        
        [sites.headers]
        "X-Test-Header" = "original-value"
        EOF
        
    - name: Test hot reload functionality
      run: |
        # Start BWS in background
        ./target/release/bws --config test-hot-reload.toml &
        BWS_PID=$!
        
        # Wait for server to start
        sleep 3
        
        # Test initial configuration
        echo "Testing initial configuration..."
        RESPONSE=$(curl -s -H "Host: localhost" http://localhost:8080/ | grep "Original Content")
        if [ -z "$RESPONSE" ]; then
          echo "‚ùå Initial content not found"
          kill $BWS_PID
          exit 1
        fi
        
        HEADER=$(curl -s -I -H "Host: localhost" http://localhost:8080/ | grep "X-Test-Header: original-value")
        if [ -z "$HEADER" ]; then
          echo "‚ùå Initial header not found"
          kill $BWS_PID
          exit 1
        fi
        echo "‚úÖ Initial configuration working"
        
        # Modify configuration
        echo "Modifying configuration..."
        cat > test-hot-reload.toml << 'EOF'
        [server]
        name = "Hot Reload Test Server"
        host = "0.0.0.0"
        worker_threads = 2
        
        [[sites]]
        name = "test-site"
        hostname = "localhost"
        port = 8080
        static_dir = "test-site/static"
        default_site = true
        
        [sites.headers]
        "X-Test-Header" = "updated-value"
        "X-New-Header" = "new-value"
        EOF
        
        # Update content
        echo "<html><body><h1>Updated Content</h1></body></html>" > test-site/static/index.html
        
        # Send SIGUSR1 for hot reload
        echo "Triggering hot reload..."
        kill -USR1 $BWS_PID
        
        # Wait for reload to complete
        sleep 5
        
        # Test updated configuration
        echo "Testing updated configuration..."
        RESPONSE=$(curl -s -H "Host: localhost" http://localhost:8080/ | grep "Updated Content")
        if [ -z "$RESPONSE" ]; then
          echo "‚ùå Updated content not found after hot reload"
          kill $BWS_PID
          exit 1
        fi
        
        HEADER=$(curl -s -I -H "Host: localhost" http://localhost:8080/ | grep "X-Test-Header: updated-value")
        if [ -z "$HEADER" ]; then
          echo "‚ùå Updated header not found after hot reload"
          kill $BWS_PID
          exit 1
        fi
        
        NEW_HEADER=$(curl -s -I -H "Host: localhost" http://localhost:8080/ | grep "X-New-Header: new-value")
        if [ -z "$NEW_HEADER" ]; then
          echo "‚ùå New header not found after hot reload"
          kill $BWS_PID
          exit 1
        fi
        echo "‚úÖ Hot reload working correctly"
        
        # Clean shutdown
        kill $BWS_PID
        wait $BWS_PID 2>/dev/null || true
        
        echo "üéâ Hot reload test completed successfully!"

  configuration-validation:
    name: Configuration Validation Test  
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.89.0
      
    - name: Cache dependencies
      uses: actions/cache@v4
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Build BWS
      run: cargo build --release --bin bws
      
    - name: Test configuration validation with --dry-run
      run: |
        echo "üß™ Testing BWS configuration validation..."
        
        # Test valid configuration files
        echo "Testing valid configurations..."
        ./target/release/bws --config config.toml --dry-run
        
        # Test example configurations
        for config in examples/*.toml; do
          echo "Validating $config..."
          ./target/release/bws --config "$config" --dry-run
        done
        
        # Test test configurations  
        for config in tests/configs/*.toml; do
          echo "Validating $config..."
          ./target/release/bws --config "$config" --dry-run
        done
        
        # Test invalid configuration
        echo "Testing invalid configuration handling..."
        cat > invalid-test.toml << 'EOF'
        [server]
        invalid_field = "should fail"
        
        [[sites]]
        # Missing required fields
        EOF
        
        if ./target/release/bws --config invalid-test.toml --dry-run 2>/dev/null; then
          echo "‚ùå Should have failed with invalid config"
          exit 1
        else
          echo "‚úÖ Correctly rejected invalid configuration"
        fi
        
        # Test malformed TOML
        echo "Testing malformed TOML handling..."
        echo "invalid toml [[[" > malformed.toml
        if ./target/release/bws --config malformed.toml --dry-run 2>/dev/null; then
          echo "‚ùå Should have failed with malformed TOML"
          exit 1
        else
          echo "‚úÖ Correctly rejected malformed TOML"
        fi
        
        echo "‚úÖ Configuration validation tests completed successfully!"
