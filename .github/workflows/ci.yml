name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.89.0
      with:
        components: rustfmt, clippy
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-
          
    - name: Check formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Build
      run: cargo build --verbose
      
    - name: Run tests
      run: cargo test --verbose
      
    - name: Check if binary runs
      run: |
        # Build the binary
        cargo build --bin bws-web-server
        
        # Create test static files
        mkdir -p static static-blog static-api static-dev
        echo "<html><body><h1>Test Main Site</h1></body></html>" > static/index.html
        echo "<html><body><h1>Test Blog Site</h1></body></html>" > static-blog/index.html
        echo "<html><body><h1>Test API Site</h1></body></html>" > static-api/index.html
        echo "<html><body><h1>Test Dev Site</h1></body></html>" > static-dev/index.html
        
        # Start server in background and test basic functionality
        timeout 30s ./target/debug/bws-web-server &
        SERVER_PID=$!
        
        # Wait for server to start
        sleep 5
        
        # Test if server responds (with timeout)
        timeout 10s bash -c 'while ! curl -f http://localhost:8080/api/health > /dev/null 2>&1; do sleep 1; done'
        
        # Test basic endpoints
        curl -f http://localhost:8080/api/health
        curl -f http://localhost:8080/api/sites
        
        # Kill the server
        kill $SERVER_PID || true
        wait $SERVER_PID || true

  security_audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@1.89.0
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: |
        # Run cargo audit and check for new vulnerabilities
        # Known accepted vulnerability: RUSTSEC-2024-0437 (protobuf via pingora)
        if ! cargo audit --ignore RUSTSEC-2024-0437; then
          echo "::error::New security vulnerabilities found beyond accepted ones"
          exit 1
        fi
        
        # Report on the known vulnerability status
        echo "::notice::Security audit complete. Known vulnerability RUSTSEC-2024-0437 is accepted and documented in SECURITY.md"

  build_matrix:
    name: Build Matrix
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [1.89.0, beta]
        exclude:
          # Reduce CI load by excluding some combinations
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        
    - name: Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.rust }}-cargo-
          
    - name: Build
      run: cargo build --verbose
      
    - name: Run tests
      run: cargo test --verbose
